// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: calculator.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Calculators {
  public static partial class Calculator
  {
    static readonly string __ServiceName = "calculators.Calculator";

    static readonly grpc::Marshaller<global::Calculators.OperationRequest> __Marshaller_calculators_OperationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Calculators.OperationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Calculators.OperationResponse> __Marshaller_calculators_OperationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Calculators.OperationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Calculators.DivisionRequest> __Marshaller_calculators_DivisionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Calculators.DivisionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Calculators.DivisionResponse> __Marshaller_calculators_DivisionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Calculators.DivisionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Calculators.OperationRequest, global::Calculators.OperationResponse> __Method_Add = new grpc::Method<global::Calculators.OperationRequest, global::Calculators.OperationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Add",
        __Marshaller_calculators_OperationRequest,
        __Marshaller_calculators_OperationResponse);

    static readonly grpc::Method<global::Calculators.OperationRequest, global::Calculators.OperationResponse> __Method_Subtract = new grpc::Method<global::Calculators.OperationRequest, global::Calculators.OperationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Subtract",
        __Marshaller_calculators_OperationRequest,
        __Marshaller_calculators_OperationResponse);

    static readonly grpc::Method<global::Calculators.OperationRequest, global::Calculators.OperationResponse> __Method_Multiply = new grpc::Method<global::Calculators.OperationRequest, global::Calculators.OperationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Multiply",
        __Marshaller_calculators_OperationRequest,
        __Marshaller_calculators_OperationResponse);

    static readonly grpc::Method<global::Calculators.DivisionRequest, global::Calculators.DivisionResponse> __Method_Divide = new grpc::Method<global::Calculators.DivisionRequest, global::Calculators.DivisionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Divide",
        __Marshaller_calculators_DivisionRequest,
        __Marshaller_calculators_DivisionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Calculators.CalculatorReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Calculator</summary>
    [grpc::BindServiceMethod(typeof(Calculator), "BindService")]
    public abstract partial class CalculatorBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Calculators.OperationResponse> Add(global::Calculators.OperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Calculators.OperationResponse> Subtract(global::Calculators.OperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Calculators.OperationResponse> Multiply(global::Calculators.OperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Calculators.DivisionResponse> Divide(global::Calculators.DivisionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CalculatorBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Add, serviceImpl.Add)
          .AddMethod(__Method_Subtract, serviceImpl.Subtract)
          .AddMethod(__Method_Multiply, serviceImpl.Multiply)
          .AddMethod(__Method_Divide, serviceImpl.Divide).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CalculatorBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Add, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Calculators.OperationRequest, global::Calculators.OperationResponse>(serviceImpl.Add));
      serviceBinder.AddMethod(__Method_Subtract, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Calculators.OperationRequest, global::Calculators.OperationResponse>(serviceImpl.Subtract));
      serviceBinder.AddMethod(__Method_Multiply, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Calculators.OperationRequest, global::Calculators.OperationResponse>(serviceImpl.Multiply));
      serviceBinder.AddMethod(__Method_Divide, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Calculators.DivisionRequest, global::Calculators.DivisionResponse>(serviceImpl.Divide));
    }

  }
}
#endregion
